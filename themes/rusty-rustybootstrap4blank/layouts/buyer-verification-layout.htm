description = "Nigerian B2B and B2C Online MarketPlace"

[session]
==
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>{{ this.page.title }} | Vend</title>
 <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.5.0/css/all.css" crossorigin="anonymous">
    <!-- CSS includes -->
    <link href="{{ [
    'assets/vendor/font-awesome-463/css/font-awesome.min.css',
    'assets/vendor/bootstrap-4.2.1-dist/css/bootstrap.min.css',
    'assets/vendor/bootstrap-4.0.0/bootstrap-4.0.0/docs/dist/css/jasny-bootstrap.min.css',
    'assets/vendor/password/dist/password.min.css',
    'assets/custom-css/start-template.css',
     ]|theme }}" rel="stylesheet">



      <link rel="manifest" href="/site.webmanifest"> 

    <link rel="icon" type="image/png" href="{{ 'assets/images/favicon.png'|theme }}"> 



<!--<link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/jasny-bootstrap/4.0.0/css/jasny-bootstrap.min.css">-->


  <link type="text/css" rel="stylesheet" href="https://cdn.firebase.com/libs/firebaseui/4.1.0/firebaseui.css" />


  <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->

  </head>
  <body>

    {% partial "Navbar1" %}
  <br class="d-lg-none "> 
   <br class="d-lg-none "> 
    
  
 <!--
 <br class="d-lg-none d-xl-block">

 <br class="d-lg-none d-xl-block">
 
 <br class="d-lg-none d-xl-block">

 <br class="d-none d-sm-block d-md-none">
   --> 
    
    
     
     <div >
   
       {% page %}

</div>
      {% partial "Footer" %}

 


    <!-- /.container -->
    <!-- Javascript includes -->
    <!-- Done separately to make it easier to remove if wanted -->
    <script type="text/javascript" src="{{ 'assets/vendor/tether/js/tether.min.js'|theme }}"></script>
    <script type="text/javascript" src="{{ 'assets/vendor/jquery/jquery-3.1.0.min.js'|theme }}"></script>
    <script type="text/javascript" src="{{ 'assets/vendor/bootstrap-4.2.1-dist/js/bootstrap.min.js'|theme }}"></script>
      



<script type="text/javascript" src="{{ 'assets/vendor/password/dist/password.min.js'|theme }}"></script>

 
    <script type="text/javascript" src="{{ 'assets/vendor/bootstrap-4.0.0/bootstrap-4.0.0/docs/dist/js/jasny-bootstrap.min.js'|theme }}"></script>
      
<!--
    <script src="{{ 'assets/javascript/jquery.js'|theme }}"></script>
   --> 
<!--
 <script src="https://code.jquery.com/jquery.js"></script>   
-->
 <!-- The core Firebase JS SDK is always required and must be listed first -->
<script src="https://www.gstatic.com/firebasejs/7.2.3/firebase-app.js"></script>
<script src="https://www.gstatic.com/firebasejs/7.2.3/firebase-auth.js"></script>

<script src="https://cdn.firebase.com/libs/firebaseui/4.1.0/firebaseui.js"></script>

<!-- TODO: Add SDKs for Firebase products that you want to use
     https://firebase.google.com/docs/web/setup#available-libraries -->

<script>
  // Your web app's Firebase configuration
  var firebaseConfig = {
    apiKey: "AIzaSyCGw4Ouk0XkWGmYBF-RbN_b9xNp9Ixo8Eg",
    authDomain: "uptrada-1553376638775.firebaseapp.com",
    databaseURL: "https://uptrada-1553376638775.firebaseio.com",
    projectId: "uptrada-1553376638775",
    storageBucket: "uptrada-1553376638775.appspot.com",
    messagingSenderId: "312534005695",
    appId: "1:312534005695:web:ba0b46abd82af3d74f930a"
  };
  // Initialize Firebase
  firebase.initializeApp(firebaseConfig);
</script>
 
{% framework extras %}
{% scripts %}
{% styles %}










<script type="text/javascript">
  $('#password').password({
  shortPass: 'The password is too short',
  badPass: 'Weak; try combining letters & numbers',
  goodPass: 'Good; try using special characters',
  strongPass: 'Strong password',
 // containsField: 'The password contains your username',
  //enterPass: 'Type your password',
  showPercent: false,
  showText: true, // shows the text tips
  animate: true, // whether or not to animate the progress bar on input blur/focus
  animateSpeed: 'fast', // the above animation speed
  field: false, // select the match field (selector or jQuery instance) for better password checks
  fieldPartialMatch: true, // whether to check for partials in field
  minimumLength: 6 // minimum password length (below this threshold, the score is 0)
});
</script>


<script type="text/javascript">
 var password = document.getElementById("password")
  , confirm_password = document.getElementById("confirm_password");

function validatePassword(){
  if(password.value != confirm_password.value) {
    confirm_password.setCustomValidity("The Password Confirmtion does not Match");
  } else {
    confirm_password.setCustomValidity('');
  }
}

password.onchange = validatePassword;
confirm_password.onkeyup = validatePassword;
</script>
        








        






 
<script>


  if ('serviceWorker' in navigator) {

     console.log('Service Worker is supported');
    window.addEventListener('load', () => {
      navigator.serviceWorker.register("/sw.js")
        .then(registration => {
          

          console.log(`Service Worker registered! Scope: ${registration.scope}`);
        })
        .catch(err => {
          console.log(`Service Worker registration failed: ${err}`);
        });
    });
  }
</script>



<script>




      // FirebaseUI config.
      var ui = new firebaseui.auth.AuthUI(firebase.auth());

   ui.start('#firebaseui-auth-container', {

    signInSuccessUrl: '/buyer-registration',
  signInOptions: [
    {
      provider: firebase.auth.PhoneAuthProvider.PROVIDER_ID,
      recaptchaParameters: {
        type: 'image', // 'audio'
        size: 'invisible', // 'invisible' or 'compact'
        badge: 'inline' //' bottomright' or 'inline' applies to invisible.
      },
      defaultCountry: 'NG', // Set default country to the United Kingdom (+44).
      // For prefilling the national number, set defaultNationNumber.
      // This will only be observed if only phone Auth provider is used since
      // for multiple providers, the NASCAR screen will always render first
      // with a 'sign in with phone number' button.
      //defaultNationalNumber: '8100000000',
      // You can also pass the full phone number string instead of the
      // 'defaultCountry' and 'defaultNationalNumber'. However, in this case,
      // the first country ID that matches the country code will be used to
      // populate the country selector. So for countries that share the same
      // country code, the selected country may not be the expected one.
      // In that case, pass the 'defaultCountry' instead to ensure the exact
      // country is selected. The 'defaultCountry' and 'defaultNationaNumber'
      // will always have higher priority than 'loginHint' which will be ignored
      // in their favor. In this case, the default country will be 'GB' even
      // though 'loginHint' specified the country code as '+1'.
      //loginHint: '+2348100000000',
      // You can provide a 'whitelistedCountries' or 'blacklistedCountries' for
      // countries to select. It takes an array of either ISO (alpha-2) or
      // E164 (prefix with '+') formatted country codes. If 'defaultCountry' is
      // not whitelisted or is blacklisted, the default country will be set to the
      // first country available (alphabetical order). Notice that
      // 'whitelistedCountries' and 'blacklistedCountries' cannot be specified
      // at the same time.
      //whitelistedCountries: ['US', '+44']
    }
  ]
});


      // Initialize the FirebaseUI Widget using Firebase.
     // var ui = new firebaseui.auth.AuthUI(firebase.auth());
      // The start method will wait until the DOM is loaded.
     // ui.start('#firebaseui-auth-container', uiConfig);
  
 
      initApp = function() {
        firebase.auth().onAuthStateChanged(function(user) {
          if (user) {
            // User is signed in.
            var displayName = user.displayName;
            var email = user.email;
            var emailVerified = user.emailVerified;
            var photoURL = user.photoURL;
            var uid = user.uid;
            var phoneNumber = user.phoneNumber;
            var providerData = user.providerData;
            user.getIdToken().then(function(accessToken) {
              document.getElementById('sign-in-status').textContent = 'Signed in';
              document.getElementById('sign-in').textContent = 'Sign out';
              document.getElementById("user-phone").value = phoneNumber;
              document.getElementById('account-details').textContent = JSON.stringify({
                displayName: displayName,
                email: email,
                emailVerified: emailVerified,
                phoneNumber: phoneNumber,
                photoURL: photoURL,
                uid: uid,
                accessToken: accessToken,
                providerData: providerData
              }, null, '  ');
            });
          } else {
            // User is signed out.
            document.getElementById('sign-in-status').textContent = 'Signed out';
            document.getElementById('sign-in').textContent = 'Sign in';
            document.getElementById('account-details').textContent = 'null';
          }
        }, function(error) {
          console.log(error);
        });
      };

      window.addEventListener('load', function() {
        initApp();
      });
    
    


$(function(){
setTimeout(function(){
      firebase.auth().signOut().then(function() {
  console.log('Signed Out');
}, function(error) {
  console.error('Sign Out Error', error);
});
    
},1800000);
});
    

</script>

<script type="text/javascript">
  
  let deferredPrompt;

window.addEventListener('beforeinstallprompt', (e) => {
    // Prevent Chrome 76 and later from showing the mini-infobar
  e.preventDefault();
  // Stash the event so it can be triggered later.
  deferredPrompt = e;
  // Update UI notify the user they can add to home screen
  showInstallPromotion();
});


function showInstallPromotion() {

var a2hsBtn = document.querySelector(".ad2hs-prompt");

a2hsBtn.style.display = "block";

a2hsBtn.addEventListener("click", addToHomeScreen);

}


function addToHomeScreen() { 

  var a2hsBtn = document.querySelector(".ad2hs-prompt");  // hide our user interface that shows our A2HS button
  a2hsBtn.style.display = 'none';  // Show the prompt
  deferredPrompt.prompt();  // Wait for the user to respond to the prompt
  deferredPrompt.userChoice
    .then(function(choiceResult){

  if (choiceResult.outcome === 'accepted') {
    console.log('User accepted the A2HS prompt');
  } else {
    console.log('User dismissed the A2HS prompt');
  }

  deferredPrompt = null;

});}


</script>



</body>
</html>

